---
description: Enforces best practices for TypeScript development, including coding standards.
globs: *.ts,*.tsx
---
# TypeScript Best Practices and Coding Standards

This document outlines best practices and coding standards for developing TypeScript applications. Following these guidelines will help ensure code quality, maintainability, and scalability.

## 2. Common Patterns and Anti-patterns

- **Design Patterns:**
    - **Factory Pattern:**  Use factories to create objects with complex initialization logic.
    - **Singleton Pattern:**  Use sparingly, and only when a single instance is truly required.
    - **Observer Pattern:**  Implement reactive patterns for handling events and data changes.
    - **Strategy Pattern:**  Define a family of algorithms and encapsulate each one into a separate class.
    - **Dependency Injection:** Reduce coupling by injecting dependencies into components and services.


- **Patterns:**
    - Prefer interfaces over types.
    - Avoid


- **Anti-patterns and Code Smells:**
    - **`any` type overuse:** Avoid using `any` as much as possible. Use more specific types or generics.
    - **Long methods/functions:** Break down large functions into smaller, more manageable units.
    - **Deeply nested code:** Refactor deeply nested code to improve readability.
    - **Magic numbers/strings:** Use constants for values that have a specific meaning.
    - **Duplicated code:** Extract common logic into reusable functions or components.
    - **Over-commenting:** Write self-documenting code and use comments only when necessary to explain complex logic.

